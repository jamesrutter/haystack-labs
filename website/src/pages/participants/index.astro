---
import Layout from "@/layouts/layout.astro";
import { getCollection } from "astro:content";
import ArrowRight from "@/assets/arrow-right.svg";
import Toolbar from "./toolbar.astro";

const participants = await getCollection("participants");
const sorted_participants = participants.sort((a, b) =>
  a.data.name.localeCompare(b.data.name)
);
const years = await getCollection("years");
---

<Layout
  title="Participants - Haystack Labs"
  description="A collection of participants from Haystack Labs"
>
  <section class="section">
    <div class="wrapper">
      <h1 class="title">Participants</h1>

      <Toolbar years={years} />

      <div class="grid-auto" id="participants-grid">
        {
          sorted_participants.map((participant) => (
            <a
              href={`/participants/${participant.id}`}
              class="participant-card"
              data-name={participant.data.name.toLowerCase()}
              data-id={participant.id.toLowerCase()}
              data-years={participant.data.year?.join(",")}
            >
              <div class="participant-card__content">
                <h3 class="participant-card__name">{participant.data.name}</h3>
                <div class="participant-card__arrow">
                  <ArrowRight width="20" height="20" fill="currentColor" />
                </div>
              </div>
            </a>
          ))
        }
      </div>

      <!-- No results message -->
      <div id="no-results" class="no-results" style="display: none;">
        <p>No participants found matching your search criteria.</p>
      </div>
    </div>
  </section>
</Layout>

<style>
  .participant-card {
    display: block;
    text-decoration: none;
    background: var(--color-haystack-navy-tint-10);
    border: 1px solid var(--color-haystack-light-seafoam-green-transparent);
    border-radius: var(--radius-lg);
    padding: var(--space-sm) var(--space-md);
    transition: all var(--transition-normal);
    position: relative;
    overflow: hidden;

    &.hidden {
      display: none;
    }
  }

  .participant-card:hover::before {
    left: 100%;
  }

  .participant-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
    border-color: var(--color-haystack-blue);
  }

  .participant-card__content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    min-height: 60px;
    gap: var(--space-sm);
  }

  .participant-card__name {
    font-family: var(--font-family-display);
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text-primary);
    margin: 0;
    transition: color var(--transition-normal);
    flex: 1;
  }

  .participant-card__meta {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    text-align: right;
  }

  .participant-card__years {
    font-family: var(--font-family-display);
    font-size: var(--font-size-sm);
    color: var(--color-text-muted);
    font-weight: var(--font-weight-medium);
  }

  .participant-card:hover .participant-card__name {
    color: var(--color-haystack-blue);
  }

  .participant-card__arrow {
    color: var(--color-text-muted);
    transition: all var(--transition-normal);
    opacity: 0.8;
    flex-shrink: 0;
  }

  .participant-card:hover .participant-card__arrow {
    color: var(--color-haystack-blue);
    transform: translateX(4px);
    opacity: 1;
  }

  .no-results {
    text-align: center;
    padding: var(--space-3xl);
    background: var(--color-haystack-navy-tint-10);
    border-radius: var(--radius-lg);

    p {
      font-family: var(--font-family-display);
      font-size: var(--font-size-lg);
      color: var(--color-text-muted);
      margin: 0;
    }
  }

  @media (max-width: 768px) {
    .participants-grid {
      grid-template-columns: 1fr;
      gap: var(--space-md);
    }

    .participant-card {
      padding: var(--space-md);
    }

    .participant-card__content {
      min-height: 35px;
    }

    .participant-card__meta {
      align-items: flex-start;
      text-align: left;
    }
  }
</style>

<script>
  const participant_cards = document.querySelectorAll(".participant-card");
  const no_results = document.getElementById("no-results");

  let current_search_term = "";
  let current_year_filter = "all";

  document.addEventListener("participant-search", (e) => {
    const custom_event = e as CustomEvent;
    current_search_term = custom_event.detail;
    filter_participants();
  });

  document.addEventListener("participant-year-filter", (e) => {
    const custom_event = e as CustomEvent;
    current_year_filter = custom_event.detail;
    filter_participants();
  });

  function filter_participants() {
    let visible_count = 0;

    participant_cards.forEach((card) => {
      const card_element = card as HTMLElement;
      const name = card_element.dataset.name || "";
      const id = card_element.dataset.id || "";
      const years = card_element.dataset.years || "";

      // Check search match
      const search_match =
        !current_search_term ||
        name.includes(current_search_term) ||
        id.includes(current_search_term);

      // Check year match - participant years are stored as comma-separated string
      const year_match =
        current_year_filter === "all" ||
        years.split(",").includes(current_year_filter);

      // Show/hide card
      if (search_match && year_match) {
        card_element.classList.remove("hidden");
        visible_count++;
      } else {
        card_element.classList.add("hidden");
      }
    });

    // Show/hide no results message
    if (no_results) {
      if (visible_count === 0) {
        no_results.style.display = "block";
      } else {
        no_results.style.display = "none";
      }
    }
  }
</script>
